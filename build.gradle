description = "Ceylon Dart Backend"

allprojects {
    group = 'com.vasileff.ceylon.dart'
    version = '0.0.1'

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

apply plugin: 'base'

ext.ceylonRepoDir = System.getProperty("user.home") + "/.ceylon/repo"
ext.ceylonBinDir = System.getProperty("user.home") + "/.ceylon/bin"

task build(dependsOn: assemble) {
    group = 'Build'
    description = 'Assembles and tests this project.'
}

task cleanAll(dependsOn: [
    "ceylon-dart-ant:clean",
    "ceylon-dart-ant:cleanEclipse",
    "ceylon-dart-compiler:clean"
])

task reset(dependsOn: ["cleanAll", "ceylon-dart-ant:eclipse"]) {
    group = 'Housekeeping'
    description = 'Clean and rebuild eclipse and project settings; useful after switching git branches.'
}

project('ceylon-dart-compiler') {
    description = "Ceylon Dart Backend Compiler"
    apply plugin: 'ceylon'

    defaultTasks 'compileCeylon'

    compileCeylon {
        // standard is src/main/ceylon
        sourceDir file("source")
    }

    ceylonDoc {
        includeSource true
        includeNonShared false
        ignoreMissingDoc true
        ignoreMissingThrows true
        // FIXME hack to make ceylon doc not crash.
        // Currently, ceylon doc requires the output
        // directory be the same as the compile directory
        // if Java classes are present in the source
        destinationDir = compileCeylon.destinationDir
    }

    // TODO plugin should create ceylonTest
    task ceylonTest(type: CeylonTestTask) {
        dependsOn compileCeylon

        report = true
        module "test.com.vasileff.ceylon.dart.compiler/1.2.1-DP2-SNAPSHOT"
        test "test.com.vasileff.ceylon.dart.compiler"
    }

    task install {
        group "Deployment"
        description "Install plugins and copy the compiled modules to the user's repository"
        dependsOn "publish"
    }

    task publish(type: Copy) {
        group "Deployment"
        description "Copy the compiled modules to the user's repository"

        dependsOn "ceylonDoc"
        dependsOn "compileCeylon"

        from ceylonDoc.destinationDir
        from compileCeylon.destinationDir

        into ceylonRepoDir
    }

    task test {
        dependsOn ceylonTest;
    }

    task build(dependsOn: assemble) {
        dependsOn test;
        group = 'Build'
        description = 'Assembles and tests this project.'
    }
}

project('ceylon-dart-ant') {
    apply plugin: 'java'
    apply plugin: 'eclipse-wtp'

    apply from: "$rootDir/buildSrc/eclipse.gradle"   // customize eclipse plugin
    apply from: "$rootDir/buildSrc/artifacts.gradle" // sourcesJar and javadocJar

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
        compile "org.apache.ant:ant:1.9.6"
    }

    task refresh {
        group = 'Housekeeping'
        description = 'Create directories, update genenerated files, etc; useful when working with IDEs.'
    }
}

project('ceylon-dart-language') {
    apply plugin: 'base'

    task compileCeylonDart(type:Exec) {
        group "Build"
        description "Compile the 'main' Ceylon modules."

        // Use the "bootstrap" compiler since we have to compile the sdk before
        // the cli, so we can include the language module in the cli module for
        // `ceylon install-dart`.

        // TODO depend on the project artifacts, not the task
        dependsOn project(":ceylon-dart-compiler").compileCeylon
        inputs.dir project(":ceylon-dart-compiler").compileCeylon.destinationDir

        ext.destinationDir = file("build/modules-dart/main")
        ext.sourceDir = file("source")

        inputs.dir sourceDir
        outputs.dir destinationDir

        String repository = project(':ceylon-dart-compiler')
                .compileCeylon.destinationDir.toString();

        workingDir projectDir
        commandLine 'ceylon', 'run',
                '--rep', repository,
                '--run', 'com.vasileff.ceylon.dart.compiler::bootstrapCompile',
                'com.vasileff.ceylon.dart.compiler/1.2.1-DP2-SNAPSHOT',
                "${sourceDir.toString()}",
                "${destinationDir.toString()}"
    }

    task repositoryZip(type: Zip) {
        dependsOn compileCeylonDart

        from compileCeylonDart.destinationDir
        into('repository')
    }

    project.assemble.dependsOn compileCeylonDart
    project.assemble.dependsOn repositoryZip

    task build(dependsOn: assemble) {
        group = 'Build'
        description = 'Assembles and tests this project.'
    }

    task install {
        group "Deployment"
        description "Install plugins and copy the compiled modules to the user's repository"
        dependsOn "publish"
    }

    task publish(type: Copy) {
        group "Deployment"
        description "Copy the compiled modules to the user's repository"

        dependsOn "compileCeylonDart"

        from compileCeylonDart.destinationDir
        into ceylonRepoDir
    }
}

project('ceylon-dart-sdk') {
    apply plugin: 'base'

    task compileCeylonDart(type:Exec) {
        group "Build"
        description "Compile the 'main' Ceylon modules."

        // Use the "bootstrap" compiler since we have to compile the sdk before
        // the cli, so we can include the sdk modules in the cli module for
        // `ceylon install-dart`.

        // TODO depend on the project artifacts, not the task
        dependsOn project(":ceylon-dart-language").compileCeylonDart
        inputs.dir project(":ceylon-dart-language").compileCeylonDart.destinationDir

        ext.destinationDir = file("build/modules-dart/main")
        ext.sourceDir = file("source")

        inputs.dir sourceDir
        outputs.dir destinationDir

        String repository = project(':ceylon-dart-compiler')
                .compileCeylon.destinationDir.toString();

        workingDir projectDir
        commandLine 'ceylon', 'run',
                '--rep', repository,
                '--run', 'com.vasileff.ceylon.dart.compiler::bootstrapCompile',
                'com.vasileff.ceylon.dart.compiler/1.2.1-DP2-SNAPSHOT',
                "${sourceDir.toString()}",
                "${destinationDir.toString()}",
                project(":ceylon-dart-language").compileCeylonDart.destinationDir,
                file("../ceylon-dart-language/modules-dart")
    }

    task repositoryZip(type: Zip) {
        dependsOn compileCeylonDart

        from compileCeylonDart.destinationDir
        into('repository')
    }

    project.assemble.dependsOn compileCeylonDart
    project.assemble.dependsOn repositoryZip

    task build(dependsOn: assemble) {
        group = 'Build'
        description = 'Assembles and tests this project.'
    }

    task install {
        group "Deployment"
        description "Install plugins and copy the compiled modules to the user's repository"
        dependsOn "publish"
    }

    task publish(type: Copy) {
        group "Deployment"
        description "Copy the compiled modules to the user's repository"

        dependsOn "compileCeylonDart"

        from compileCeylonDart.destinationDir
        into ceylonRepoDir
    }
}

project('ceylon-dart-cli') {
    description = "Ceylon Dart Commandline Interface"
    apply plugin: 'ceylon'

    defaultTasks 'compileCeylon'

    ext.generatedResourceDir = file("build/resource")

    task prepareResourcesLM(type: Copy) {
        dependsOn project(":ceylon-dart-language").repositoryZip

        from file(project(":ceylon-dart-language").repositoryZip.archivePath)
        into file(generatedResourceDir.toString() + "/com/vasileff/ceylon/dart/cli")
        rename '.*', 'ceylon-language.zip'
    }

    task prepareResourcesSDK(type: Copy) {
        dependsOn project(":ceylon-dart-sdk").repositoryZip

        from file(project(":ceylon-dart-sdk").repositoryZip.archivePath)
        into file(generatedResourceDir.toString() + "/com/vasileff/ceylon/dart/cli")
        rename '.*', 'ceylon-sdk.zip'
    }

    compileCeylon {
        dependsOn prepareResourcesLM
        dependsOn prepareResourcesSDK

        // standard is src/main/ceylon
        sourceDir file("source")

        // include the language module as a resource
        resourceDir generatedResourceDir

        // add dependency, and auto-config input repository!
        dependsOn project(":ceylon-dart-compiler").compileCeylon
    }

    ceylonDoc {
        includeSource true
        includeNonShared false
        ignoreMissingDoc true
        ignoreMissingThrows true

        // TODO this shouldn't be necessary
        repository project(":ceylon-dart-compiler").compileCeylon.destinationDir

        // For now, just output everything to the same repository since 'ceylon copy'
        // doesn't work well when fed multiple '--rep' options.
        destinationDir = compileCeylon.destinationDir
    }

    // TODO plugin should create ceylonPluginPack
    task ceylonPluginPack(type: CeylonPluginPackTask) {
        // For now, just output everything to the same repository since 'ceylon copy'
        // doesn't work well when fed multiple '--rep' options.
        destinationDir = compileCeylon.destinationDir

        scriptDir file("script")
        module "com.vasileff.ceylon.dart.cli"
    }

    project.assemble.dependsOn ceylonPluginPack

    task install(type: Copy) {
        group "Deployment"
        description "Install plugins and copy the compiled modules to the user's repository"
        dependsOn "publish"

        from(file("script/com/vasileff/ceylon/dart/cli")) {
          include "ceylon-install-dart.plugin"
          include "ceylon-compile-dart.plugin"
          include "ceylon-assemble-dart.plugin"
          include "ceylon-run-dart.plugin"
        }
        into ceylonBinDir + "/com.vasileff.ceylon.dart.cli"
    }

    task publish(type: Copy) {
        group "Deployment"
        description "Copy the compiled modules to the user's repository"

        dependsOn "compileCeylon"
        dependsOn "ceylonDoc"
        dependsOn "ceylonPluginPack"

        from ceylonDoc.destinationDir
        from compileCeylon.destinationDir
        from ceylonPluginPack.destinationDir

        into ceylonRepoDir
    }

    task build(dependsOn: assemble) {
        group = 'Build'
        description = 'Assembles and tests this project.'
    }
}

wrapper {
    jarFile 'buildSrc/wrapper/gradle-wrapper.jar'
}

