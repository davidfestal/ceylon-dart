import "dart:core" as $dart$core;
import "package:ceylon/interop/dart/dart.dart" as $ceylon$interop$dart;
import "package:ceylon/dart/runtime/model/model.dart" as $ceylon$dart$runtime$model;
import "package:ceylon/language/language.dart" as $ceylon$language;

class Foo implements $ceylon$language.dart$$Basic {
    Foo([$dart$core.Object si1, $dart$core.Object si2, $dart$core.Object isf]) {
        this._si1 = si1;
        this._si2 = si2;
        this._isf = isf;
        if (!(_si1 is $ceylon$language.String)) {
            throw new $ceylon$language.AssertionError("Violated: is String si1");
        }
        si1$0 = $ceylon$language.$dartString(this._si1 as $ceylon$language.String);
        if (!(_si2 is $ceylon$language.String)) {
            throw new $ceylon$language.AssertionError("Violated: is String si2");
        }
        si2$1 = $ceylon$language.$dartString(this._si2 as $ceylon$language.String);
        if (!((_isf is $ceylon$language.String) || (_isf is $ceylon$language.Integer))) {
            throw new $ceylon$language.AssertionError("Violated: is String | Integer isf");
        }
    }
    $dart$core.Object _si1;
    $dart$core.Object _si2;
    $dart$core.Object _isf;
    $dart$core.String si1$0;
    $dart$core.String si2$1;
}
const _$jsonModel = const{"\$mod-name":"default","\$mod-version":"unversioned","":const{"Foo":const{"mt":"c","nm":"Foo","super":const{"nm":"Basic","pk":"\$","md":"\$"},"sts":const[]}}};

var _$module = null;

get $module {
    if (_$module == null) {
        _$module = new $ceylon$dart$runtime$model.json$LazyJsonModule(new $ceylon$interop$dart.JsonObject(_$jsonModel));
        _$module.initializeImports((new $ceylon$interop$dart.CeylonIterable([$ceylon$language.$module])).sequence());
    }
    return _$module;
}