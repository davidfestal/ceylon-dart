import "dart:core" as $dart$core;
import "package:ceylon/interop/dart/dart.dart" as $ceylon$interop$dart;
import "package:ceylon/dart/runtime/model/model.dart" as $ceylon$dart$runtime$model;
import "package:ceylon/language/language.dart" as $ceylon$language;

class fun$C implements $ceylon$language.dart$$Basic {
    $ceylon$language.Callable $capture$fun$captureMe1;
    $ceylon$language.Callable $capture$fun$captureMe2;
    fun$C([$ceylon$language.Callable $capture$fun$captureMe1, $ceylon$language.Callable $capture$fun$captureMe2]) {
        this.$capture$fun$captureMe1 = $capture$fun$captureMe1;
        this.$capture$fun$captureMe2 = $capture$fun$captureMe2;
        $capture$fun$captureMe1.f();
        $capture$fun$captureMe2.f();
        _cm1 = $capture$fun$captureMe1;
        _cm2 = $capture$fun$captureMe2;
    }
    $ceylon$language.Callable _cm1;
    $ceylon$language.Callable _cm2;
}
void $package$fun([$ceylon$language.Callable captureMe1, $ceylon$language.Callable captureMe2]) {}

void fun([$ceylon$language.Callable captureMe1, $ceylon$language.Callable captureMe2]) => $package$fun(captureMe1, captureMe2);

const _$jsonModel = const{"\$mod-name":"default","\$mod-version":"unversioned","":const{}};

var _$module = null;

get $module {
    if (_$module == null) {
        _$module = new $ceylon$dart$runtime$model.json$LazyJsonModule(new $ceylon$interop$dart.JsonObject(_$jsonModel));
        _$module.initializeImports((new $ceylon$interop$dart.CeylonIterable([$ceylon$language.$module])).sequence());
    }
    return _$module;
}