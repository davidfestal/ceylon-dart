import "dart:core" as $dart$core;
import "package:ceylon/interop/dart/dart.dart" as $ceylon$interop$dart;
import "package:ceylon/dart/runtime/model/model.dart" as $ceylon$dart$runtime$model;
import "package:ceylon/language/language.dart" as $ceylon$language;

class A$B implements $ceylon$language.dart$$Basic {
  A $outer$default$A;
  A$B([A $outer$default$A]) {
    this.$outer$default$A = $outer$default$A;
  }
  $dart$core.String foo() => "foo";
  $dart$core.String get bar => "bar";
}
class A implements $ceylon$language.dart$$Basic {
  A() {}
  A$B $new$A$B() => new A$B(this);
}
void $package$run() {
  $ceylon$language.Callable f = (new $ceylon$language.dart$Callable(([$dart$core.Object $r]) => new $ceylon$language.dart$Callable(() => $ceylon$language.$ceylonString(($r as A$B).foo())))).f((new A()).$new$A$B()) as $ceylon$language.Callable;
  $dart$core.String b = $ceylon$language.$dartString((new $ceylon$language.dart$Callable(([$dart$core.Object $r]) => $ceylon$language.$ceylonString(($r as A$B).bar))).f((new A()).$new$A$B()) as $ceylon$language.String);
  $ceylon$language.print(f.f());
  $ceylon$language.print($ceylon$language.$ceylonString(b));
}

void run() => $package$run();

$ceylon$language.dart$Callable _$runToplevel = new $ceylon$language.dart$Callable(($ceylon$language.String toplevel) {
  switch (toplevel.toString()) {
  case "run" :
    $package$run();
    return $ceylon$language.$true;
  }
  return $ceylon$language.$false;
});

const _$jsonModel = const{"\$mod-name":"default","\$mod-version":"unversioned","":const{"A":const{"mt":"c","nm":"A","super":const{"nm":"Basic","pk":"\$","md":"\$"},"\$c":const{"B":const{"mt":"c","nm":"B","super":const{"nm":"Basic","pk":"\$","md":"\$"}}}}}};

var _$module = null;

var _$moduleInitializing = false;

get $module {
  if ((_$module == null) && (!_$moduleInitializing)) {
    _$moduleInitializing = true;
    _$module = new $ceylon$dart$runtime$model.json$LazyJsonModule(new $ceylon$interop$dart.JsonObject(_$jsonModel), _$runToplevel);
    _$moduleInitializing = false;
    _$module.initializeImports((new $ceylon$interop$dart.CeylonIterable([$ceylon$language.$module])).sequence());
  }
  return _$module;
}

void main($dart$core.List arguments) {
  $ceylon$language.$run(arguments, $module);
}