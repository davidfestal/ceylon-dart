import "dart:core" as $dart$core;
import "package:ceylon/interop/dart/dart.dart" as $ceylon$interop$dart;
import "package:ceylon/dart/runtime/model/model.dart" as $ceylon$dart$runtime$model;
import "package:ceylon/language/language.dart" as $ceylon$language;

class C$D implements $ceylon$language.dart$$Basic {
  C $outer$default$C;
  C$D([C $outer$default$C, $dart$core.String s]) {
    this.$outer$default$C = $outer$default$C;
    this._s = s;
    $ceylon$language.print($ceylon$language.$ceylonString(this._s));
  }
  $dart$core.String _s;
}
class C implements $ceylon$language.dart$$Basic {
  C() {}
  C$D $new$C$D([$dart$core.String s]) => new C$D(this, s);
}
void $package$run() {
  C c1 = new C();
  C c2 = null;
  ((C $r) => null == $r ? null : $r.$new$C$D("Test1"))(c1);
  ((C $r) => null == $r ? null : $r.$new$C$D("Test2"))(c2);
}

void run() => $package$run();

$ceylon$language.dart$Callable _$runToplevel = new $ceylon$language.dart$Callable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Boolean"), new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "[ceylon.language::String]"), ($ceylon$language.String toplevel) {
  switch (toplevel.toString()) {
  case "run" :
    $package$run();
    return $ceylon$language.$true;
  case "C" :
    new C();
    return $ceylon$language.$true;
  }
  return $ceylon$language.$false;
});

const _$jsonModel = const{"\$mod-name":"default","\$mod-version":"unversioned","":const{"C":const{"mt":"c","nm":"C","super":const{"nm":"Basic","pk":"\$","md":"\$"},"\$c":const{"D":const{"mt":"c","nm":"D","super":const{"nm":"Basic","pk":"\$","md":"\$"}}}}}};

var _$module = null;

var _$moduleInitializing = false;

get $module {
  if ((_$module == null) && (!_$moduleInitializing)) {
    _$moduleInitializing = true;
    _$module = new $ceylon$dart$runtime$model.json$LazyJsonModule(new $ceylon$interop$dart.JsonObject(_$jsonModel), _$runToplevel);
    _$moduleInitializing = false;
    _$module.initializeImports((new $ceylon$interop$dart.CeylonIterable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.dart.runtime.model::Module"), [$ceylon$language.$module])).sequence());
  }
  return _$module;
}

void main($dart$core.List arguments) {
  $ceylon$language.$run(arguments, $module);
}