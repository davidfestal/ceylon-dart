import "dart:core" as $dart$core;
import "package:ceylon/interop/dart/dart.dart" as $ceylon$interop$dart;
import "package:ceylon/dart/runtime/model/model.dart" as $ceylon$dart$runtime$model;
import "package:ceylon/language/language.dart" as $ceylon$language;

class hashAssign$A implements $ceylon$language.dart$$Basic {
  hashAssign$A() {
    _x = 1;
  }
  $dart$core.int _x;
  $dart$core.int get hashCode => _x;
  void set hashCode($dart$core.int hash) {
    _x = hash;
  }
}
void $package$hashAssign() {
  hashAssign$A a = new hashAssign$A();
  if (!(a.hashCode == 1)) {
    throw new $ceylon$language.AssertionError("Violated: a.hash == 1");
  }
  a.hashCode = 2;
  if (!(a.hashCode == 2)) {
    throw new $ceylon$language.AssertionError("Violated: a.hash == 2");
  }
}

void hashAssign() => $package$hashAssign();

class hashReference$A implements $ceylon$language.dart$$Basic {
  hashReference$A() {
    hashCode = 1;
  }
  $dart$core.int hashCode;
}
void $package$hashReference() {
  hashReference$A a = new hashReference$A();
  if (!(a.hashCode == 1)) {
    throw new $ceylon$language.AssertionError("Violated: a.hash == 1");
  }
}

void hashReference() => $package$hashReference();

class hashReferenceVariable$A implements $ceylon$language.dart$$Basic {
  hashReferenceVariable$A() {
    hashCode = 1;
  }
  $dart$core.int hashCode;
}
void $package$hashReferenceVariable() {
  hashReferenceVariable$A a = new hashReferenceVariable$A();
  if (!(a.hashCode == 1)) {
    throw new $ceylon$language.AssertionError("Violated: a.hash == 1");
  }
  a.hashCode = 2;
  if (!(a.hashCode == 2)) {
    throw new $ceylon$language.AssertionError("Violated: a.hash == 2");
  }
}

void hashReferenceVariable() => $package$hashReferenceVariable();

abstract class hashInterface$I {
  $dart$core.int get hashCode;
  static $dart$core.int $get$hashCode([final hashInterface$I $this]) => 1;
  void set hashCode($dart$core.int hash);
  static $dart$core.int $set$hash([final hashInterface$I $this, $dart$core.int hash]) {
    $ceylon$language.print($ceylon$language.$ceylonInteger(hash));
    return hash;
  }
}
class hashInterface$o_ implements $ceylon$language.dart$$Object, hashInterface$I {
  hashInterface$o_() {}
  $dart$core.bool operator ==($dart$core.Object that) => that is hashInterface$o_;
  $dart$core.int get hashCode => hashInterface$I.$get$hashCode(this);
  void set hashCode($dart$core.int hash) {
    hashInterface$I.$set$hash(this, hash);
  }
}
void $package$hashInterface() {
  final hashInterface$o_ o = new hashInterface$o_();
  if (!(o.hashCode == 1)) {
    throw new $ceylon$language.AssertionError("Violated: o.hash == 1");
  }
}

void hashInterface() => $package$hashInterface();

void $package$run() {
  $package$hashAssign();
  $package$hashReference();
  $package$hashReferenceVariable();
  $package$hashInterface();
}

void run() => $package$run();

$ceylon$language.dart$Callable _$runToplevel = new $ceylon$language.dart$Callable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Boolean"), new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "[ceylon.language::String]"), ($ceylon$language.String toplevel) {
  switch (toplevel.toString()) {
  case "run" :
    $package$run();
    return $ceylon$language.$true;
  }
  return $ceylon$language.$false;
});

const _$jsonModel = const{"\$mod-name":"default","\$mod-version":"unversioned","":const{}};

var _$module = null;

var _$moduleInitializing = false;

get $module {
  if ((_$module == null) && (!_$moduleInitializing)) {
    _$moduleInitializing = true;
    _$module = new $ceylon$dart$runtime$model.json$LazyJsonModule(new $ceylon$interop$dart.JsonObject(_$jsonModel), _$runToplevel);
    _$moduleInitializing = false;
    _$module.initializeImports((new $ceylon$interop$dart.CeylonIterable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.dart.runtime.model::Module"), [$ceylon$language.$module])).sequence());
  }
  return _$module;
}

void main($dart$core.List arguments) {
  $ceylon$language.$run(arguments, $module);
}