import "dart:core" as $dart$core;
import "package:ceylon/language/language.dart" as $ceylon$language;

class memberClassRefinement$Super$Inner {
    memberClassRefinement$Super $outer$default$memberClassRefinement$Super;
    memberClassRefinement$Super$Inner([memberClassRefinement$Super $outer$default$memberClassRefinement$Super]) {
        this.$outer$default$memberClassRefinement$Super = $outer$default$memberClassRefinement$Super;
    }
    $dart$core.String toString() => "Super.inner";
    memberClassRefinement$Super$Inner get newInner => $outer$default$memberClassRefinement$Super.$new$memberClassRefinement$Super$Inner();
}
class memberClassRefinement$Super {
    memberClassRefinement$Super() {}
    memberClassRefinement$Super$Inner $new$memberClassRefinement$Super$Inner() => new memberClassRefinement$Super$Inner(this);
}
class memberClassRefinement$Sub$Inner  extends memberClassRefinement$Super$Inner {
    memberClassRefinement$Sub $outer$default$memberClassRefinement$Sub;
    memberClassRefinement$Super get $outer$default$memberClassRefinement$Super => $outer$default$memberClassRefinement$Sub;
    memberClassRefinement$Sub$Inner([memberClassRefinement$Sub $outer$default$memberClassRefinement$Sub]) : super($outer$default$memberClassRefinement$Sub) {
        this.$outer$default$memberClassRefinement$Sub = $outer$default$memberClassRefinement$Sub;
    }
    $dart$core.String toString() => "Sub.inner";
}
class memberClassRefinement$Sub  extends memberClassRefinement$Super {
    memberClassRefinement$Sub() {}
    memberClassRefinement$Sub$Inner $new$memberClassRefinement$Super$Inner() => new memberClassRefinement$Sub$Inner(this);
}
void $package$memberClassRefinement() {
    if (!((new memberClassRefinement$Sub()).$new$memberClassRefinement$Super$Inner().newInner is memberClassRefinement$Sub$Inner)) {
        throw new $ceylon$language.AssertionError("Violated: Sub().Inner().newInner is Sub.Inner");
    }
}

void memberClassRefinement() => $package$memberClassRefinement();