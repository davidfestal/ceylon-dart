import "dart:core" as $dart$core;
import "package:ceylon/interop/dart/dart.dart" as $ceylon$interop$dart;
import "package:ceylon/dart/runtime/model/model.dart" as $ceylon$dart$runtime$model;
import "package:ceylon/language/language.dart" as $ceylon$language;

abstract class AbstractFoo implements $ceylon$language.dart$$Basic {
  AbstractFoo() {}
}
class Foo$FooMemberClass implements $ceylon$language.dart$$Basic {
  Foo $outer$default$Foo;
  Foo$FooMemberClass([Foo $outer$default$Foo]) {
    this.$outer$default$Foo = $outer$default$Foo;
  }
}
class Foo$_fooMethod$ClassInAMethod implements $ceylon$language.dart$$Basic {
  Foo $outer$default$Foo;
  Foo$_fooMethod$ClassInAMethod([Foo $outer$default$Foo]) {
    this.$outer$default$Foo = $outer$default$Foo;
  }
}
class Foo implements $ceylon$language.dart$$Basic {
  Foo() {}
  void _fooMethod() {}
}
$ceylon$language.dart$Callable _$runToplevel = new $ceylon$language.dart$Callable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Boolean"), new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "[ceylon.language::String]"), ($ceylon$language.String toplevel) {
  return $ceylon$language.$false;
});

const _$jsonModel = const{"\$mod-name":"default","\$mod-version":"unversioned","":const{"AbstractFoo":const{"mt":"c","nm":"AbstractFoo","super":const{"nm":"Basic","pk":"\$","md":"\$"}},"Foo":const{"mt":"c","nm":"Foo","super":const{"nm":"Basic","pk":"\$","md":"\$"},"\$c":const{"FooMemberClass":const{"mt":"c","nm":"FooMemberClass","super":const{"nm":"Basic","pk":"\$","md":"\$"}}}}}};

var _$module = null;

var _$moduleInitializing = false;

get $module {
  if ((_$module == null) && (!_$moduleInitializing)) {
    _$moduleInitializing = true;
    _$module = new $ceylon$dart$runtime$model.json$LazyJsonModule(new $ceylon$interop$dart.JsonObject(_$jsonModel), _$runToplevel);
    _$moduleInitializing = false;
    _$module.initializeImports((new $ceylon$interop$dart.CeylonIterable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.dart.runtime.model::Module"), [$ceylon$language.$module])).sequence());
  }
  return _$module;
}

void main($dart$core.List arguments) {
  $ceylon$language.$run(arguments, $module);
}