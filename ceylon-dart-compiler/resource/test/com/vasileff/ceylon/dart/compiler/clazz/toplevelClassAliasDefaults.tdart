import "dart:core" as $dart$core;
import "package:ceylon/interop/dart/dart.dart" as $ceylon$interop$dart;
import "package:ceylon/dart/runtime/model/model.dart" as $ceylon$dart$runtime$model;
import "package:ceylon/language/language.dart" as $ceylon$language;

class C implements $ceylon$language.dart$$Basic {
  void _$init$C([$dart$core.int $bitmap, $dart$core.Object $create$a, $dart$core.Object $create$b, $dart$core.Object $$a]) {
    if (0 != ($bitmap & 2)) {
      this.i = $$a as $dart$core.int;
    }
    if (0 != ($bitmap & 1)) {
      this.i = ($create$a as $dart$core.int) + ($create$b as $dart$core.int);
    }
  }
  C([$dart$core.Object a = $ceylon$language.dart$default]) : this.$d(2, null, null, a);
  C.$d([$dart$core.int $bitmap, $dart$core.Object $create$a, $dart$core.Object $create$b, $dart$core.Object $$a = $ceylon$language.dart$default]) : this.$s($bitmap | 2, $create$a, $create$b, (() {
    if ($dart$core.identical($$a, $ceylon$language.dart$default)) {
      $$a = 10;
    }
    return [$$a];
  })());
  C.$s([$dart$core.int $bitmap, $dart$core.Object $create$a, $dart$core.Object $create$b, $dart$core.List a]) : this.$w($bitmap, $create$a, $create$b, a[0]);
  C.$w([$dart$core.int $bitmap, $dart$core.Object $create$a, $dart$core.Object $create$b, $dart$core.Object $$a]) {
    _$init$C($bitmap | 2, $create$a, $create$b, $$a);
  }
  C.create([$dart$core.Object a = $ceylon$language.dart$default, $dart$core.Object b = $ceylon$language.dart$default]) : this.create$d(1, a, b);
  C.create$d([$dart$core.int $bitmap, $dart$core.Object $create$a = $ceylon$language.dart$default, $dart$core.Object $create$b = $ceylon$language.dart$default]) : this.create$s($bitmap | 1, (() {
    if ($dart$core.identical($create$a, $ceylon$language.dart$default)) {
      $create$a = 20;
    }
    if ($dart$core.identical($create$b, $ceylon$language.dart$default)) {
      $create$b = 30;
    }
    return [$create$a, $create$b];
  })());
  C.create$s([$dart$core.int $bitmap, $dart$core.List a]) : this.create$w($bitmap, a[0], a[1]);
  C.create$w([$dart$core.int $bitmap, $dart$core.Object $create$a, $dart$core.Object $create$b]) {
    _$init$C($bitmap | 1, $create$a, $create$b);
  }
  $dart$core.int i;
}
class D  extends C {
  D([$dart$core.int p]) : super(p) {
    this._p = p;
  }
  $dart$core.int _p;
}
class DCreate  extends C {
  DCreate([$dart$core.int p, $dart$core.int q]) : super.create(p, q) {
    this._p = p;
    this._q = q;
  }
  $dart$core.int _p;
  $dart$core.int _q;
}
void $package$run() {
  if (!((new C(10)).i == 10)) {
    throw new $ceylon$language.AssertionError("Violated: CAlias(10).i == 10");
  }
  if (!((new C.create(10, 20)).i == 30)) {
    throw new $ceylon$language.AssertionError("Violated: CCreateAlias(10, 20).i == 30");
  }
  if (!((() {
    $dart$core.int arg$0$0 = 10;
    return new C(arg$0$0);
  })().i == 10)) {
    throw new $ceylon$language.AssertionError("Violated: CAlias {x = 10;}.i == 10");
  }
  if (!((() {
    $dart$core.int arg$1$0 = 10;
    $dart$core.int arg$1$1 = 20;
    return new C.create(arg$1$0, arg$1$1);
  })().i == 30)) {
    throw new $ceylon$language.AssertionError("Violated: CCreateAlias {x = 10; y = 20;}.i == 30");
  }
  if (!((new D(10)).i == 10)) {
    throw new $ceylon$language.AssertionError("Violated: D(10).i == 10");
  }
  if (!((new DCreate(10, 20)).i == 30)) {
    throw new $ceylon$language.AssertionError("Violated: DCreate(10, 20).i == 30");
  }
  if (!((() {
    $dart$core.int arg$2$0 = 10;
    return new D(arg$2$0);
  })().i == 10)) {
    throw new $ceylon$language.AssertionError("Violated: D {p = 10;}.i == 10");
  }
  if (!((() {
    $dart$core.int arg$3$0 = 10;
    $dart$core.int arg$3$1 = 20;
    return new DCreate(arg$3$0, arg$3$1);
  })().i == 30)) {
    throw new $ceylon$language.AssertionError("Violated: DCreate {p = 10; q = 20;}.i == 30");
  }
}

void run() => $package$run();

$ceylon$language.dart$Callable _$runToplevel = new $ceylon$language.dart$Callable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Boolean"), new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "[ceylon.language::String]"), ($ceylon$language.String toplevel) {
  switch (toplevel.toString()) {
  case "run" :
    $package$run();
    return $ceylon$language.$true;
  case "C" :
    new C();
    return $ceylon$language.$true;
  }
  return $ceylon$language.$false;
});

const _$jsonModel = const{"\$mod-name":"default","\$mod-version":"unversioned","":const{"C":const{"mt":"c","nm":"C","super":const{"nm":"Basic","pk":"\$","md":"\$"}},"CAlias":const{"mt":"c","nm":"CAlias","super":const{"nm":"C","pk":"."}},"CCreateAlias":const{"mt":"c","nm":"CCreateAlias","super":const{"nm":"C","pk":"."}},"D":const{"mt":"c","nm":"D","super":const{"nm":"CAlias","pk":"."}},"DCreate":const{"mt":"c","nm":"DCreate","super":const{"nm":"CCreateAlias","pk":"."}}}};

var _$module = null;

var _$moduleInitializing = false;

get $module {
  if ((_$module == null) && (!_$moduleInitializing)) {
    _$moduleInitializing = true;
    _$module = new $ceylon$dart$runtime$model.json$LazyJsonModule(new $ceylon$interop$dart.JsonObject(_$jsonModel), _$runToplevel);
    _$moduleInitializing = false;
    _$module.initializeImports((new $ceylon$interop$dart.CeylonIterable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.dart.runtime.model::Module"), [$ceylon$language.$module])).sequence());
  }
  return _$module;
}

void main($dart$core.List arguments) {
  $ceylon$language.$run(arguments, $module);
}