import "dart:core" as $dart$core;
import "package:ceylon/interop/dart/dart.dart" as $ceylon$interop$dart;
import "package:ceylon/dart/runtime/model/model.dart" as $ceylon$dart$runtime$model;
import "package:ceylon/language/language.dart" as $ceylon$language;

abstract class run$A {
}
abstract class run$B implements run$A, $ceylon$language.dart$$Identifiable {
}
void $package$run() {
    run$B x$get() => $ceylon$language.nothing as run$B;

    run$A y = $ceylon$language.identity((($dart$core.Object $lhs$) => null == $lhs$ ? $ceylon$language.nothing : $lhs$)(x$get())) as run$A;
    $ceylon$language.print(y);
}

void run() => $package$run();

const _$jsonModel = const{"\$mod-name":"default","\$mod-version":"unversioned","":const{}};

var _$module = null;

get $module {
    if (_$module == null) {
        _$module = new $ceylon$dart$runtime$model.json$LazyJsonModule(new $ceylon$interop$dart.JsonObject(_$jsonModel));
        _$module.initializeImports((new $ceylon$interop$dart.CeylonIterable([$ceylon$language.$module])).sequence());
    }
    return _$module;
}