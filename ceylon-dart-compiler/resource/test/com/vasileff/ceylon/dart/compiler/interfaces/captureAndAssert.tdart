import "dart:core" as $dart$core;
import "package:ceylon/language/language.dart" as $ceylon$language;

abstract class capturesWithControlBlocks$Bar {
    void capturesIFS();
    static void $capturesIFS([final capturesWithControlBlocks$Bar $this]) {
        $dart$core.Object capture = $this.$capture$capturesWithControlBlocks$x;
        $ceylon$language.print(capture);
    }
    $dart$core.Object $capture$capturesWithControlBlocks$x;
}
abstract class capturesWithControlBlocks$Baz implements capturesWithControlBlocks$Bar {
    void capturesIF();
    static void $capturesIF([final capturesWithControlBlocks$Baz $this]) {
        $dart$core.Object capture = $this.$capture$capturesWithControlBlocks$$x;
        $ceylon$language.print(capture);
    }
    $dart$core.Object $capture$capturesWithControlBlocks$$x;
}
abstract class capturesWithControlBlocks$Ban implements capturesWithControlBlocks$Baz {
    void capturesI();
    static void $capturesI([final capturesWithControlBlocks$Ban $this]) {
        $dart$core.int capture = $this.$capture$capturesWithControlBlocks$$$x$0 + 1;
        $ceylon$language.print($ceylon$language.$ceylonInteger(capture));
    }
    $dart$core.int $capture$capturesWithControlBlocks$$$x$0;
}
class capturesWithControlBlocks$b_ implements $ceylon$language.dart$$Basic, capturesWithControlBlocks$Ban {
    $dart$core.int $capture$capturesWithControlBlocks$$$x$0;
    $dart$core.Object $capture$capturesWithControlBlocks$$x;
    $dart$core.Object $capture$capturesWithControlBlocks$x;
    capturesWithControlBlocks$b_([$dart$core.int $capture$capturesWithControlBlocks$$$x$0, $dart$core.Object $capture$capturesWithControlBlocks$$x, $dart$core.Object $capture$capturesWithControlBlocks$x]) {
        this.$capture$capturesWithControlBlocks$$$x$0 = $capture$capturesWithControlBlocks$$$x$0;
        this.$capture$capturesWithControlBlocks$$x = $capture$capturesWithControlBlocks$$x;
        this.$capture$capturesWithControlBlocks$x = $capture$capturesWithControlBlocks$x;
    }
    void capturesI() => capturesWithControlBlocks$Ban.$capturesI(this);
    void capturesIF() => capturesWithControlBlocks$Baz.$capturesIF(this);
    void capturesIFS() => capturesWithControlBlocks$Bar.$capturesIFS(this);
}
void $package$capturesWithControlBlocks() {
    $dart$core.Object x = $ceylon$language.$ceylonInteger(5);
    $ceylon$language.print(x);
    if (!((x is $ceylon$language.Integer) || (x is $ceylon$language.Float))) {
        throw new $ceylon$language.AssertionError("Violated: is Integer|Float x");
    }
    $ceylon$language.print(x);
    $ceylon$language.print(x);
    $dart$core.int x$0;
    if (!(x is $ceylon$language.Integer)) {
        throw new $ceylon$language.AssertionError("Violated: is Integer x");
    }
    x$0 = $ceylon$language.$dartInt(x as $ceylon$language.Integer);
    $ceylon$language.print($ceylon$language.$ceylonInteger(x$0));
    final capturesWithControlBlocks$b_ b = new capturesWithControlBlocks$b_(x$0, x, x);
    b.capturesI();
    b.capturesIF();
    b.capturesIFS();
}

void capturesWithControlBlocks() => $package$capturesWithControlBlocks();