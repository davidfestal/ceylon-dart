import "dart:core" as $dart$core;
import "package:ceylon/interop/dart/dart.dart" as $ceylon$interop$dart;
import "package:ceylon/dart/runtime/model/model.dart" as $ceylon$dart$runtime$model;
import "package:ceylon/language/language.dart" as $ceylon$language;

abstract class I {
  void printHello();
  static void $printHello([final I $this]) {
    $dart$core.Object f = new $ceylon$language.dart$Callable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Anything"), new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "[]"), () => $ceylon$language.print($ceylon$language.$ceylonString("hello")));
    if (f is $ceylon$language.Callable) {
      $ceylon$language.Callable f$0;
      f$0 = f as $ceylon$language.Callable;
      f$0.f();
      $ceylon$language.Callable f2 = f$0;
      f2.f();
    }
  }
}
class run$$anonymous$1_ implements $ceylon$language.dart$$Basic, I {
  run$$anonymous$1_() {}
  void printHello() => I.$printHello(this);
}
void $package$run() {
  (new run$$anonymous$1_()).printHello();
}

void run() => $package$run();

$ceylon$language.dart$Callable _$runToplevel = new $ceylon$language.dart$Callable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Boolean"), new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "[ceylon.language::String]"), ($ceylon$language.String toplevel) {
  switch (toplevel.toString()) {
  case "run" :
    $package$run();
    return $ceylon$language.$true;
  }
  return $ceylon$language.$false;
});

const _$jsonModel = const{"\$mod-name":"default","\$mod-version":"unversioned","":const{"I":const{"mt":"i","nm":"I"}}};

var _$module = null;

var _$moduleInitializing = false;

get $module {
  if ((_$module == null) && (!_$moduleInitializing)) {
    _$moduleInitializing = true;
    _$module = new $ceylon$dart$runtime$model.json$LazyJsonModule(new $ceylon$interop$dart.JsonObject(_$jsonModel), _$runToplevel);
    _$moduleInitializing = false;
    _$module.initializeImports((new $ceylon$interop$dart.CeylonIterable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.dart.runtime.model::Module"), [$ceylon$language.$module])).sequence());
  }
  return _$module;
}

void main($dart$core.List arguments) {
  $ceylon$language.$run(arguments, $module);
}