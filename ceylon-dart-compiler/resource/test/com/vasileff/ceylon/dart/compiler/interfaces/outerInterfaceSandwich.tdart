import "dart:core" as $dart$core;
import "package:ceylon/language/language.dart" as $ceylon$language;

class A$I$B implements $ceylon$language.dart$$Basic {
    A$I $outer$default$A$I;
    A$I$B([A$I $outer$default$A$I]) {
        this.$outer$default$A$I = $outer$default$A$I;
    }
    $dart$core.String get sba => $outer$default$A$I.$outer$default$A.s;
    $dart$core.String get sbi => $outer$default$A$I.si;
}
abstract class A$I {
    A get $outer$default$A;
    $dart$core.String get si;
    static $dart$core.String $get$si([final A$I $this]) => $this.$outer$default$A.s;
    static A$I$B $$new$A$I$B([final A$I $this]) => new A$I$B($this);
    A$I$B $new$A$I$B();
}
class A$i_ implements $ceylon$language.dart$$Basic, A$I {
    A $outer$default$A;
    A$i_([A $outer$default$A]) {
        this.$outer$default$A = $outer$default$A;
    }
    $dart$core.String get si => A$I.$get$si(this);
    A$I$B $new$A$I$B() => A$I.$$new$A$I$B(this);
}
class A implements $ceylon$language.dart$$Basic {
    A() {
        i = new A$i_(this);
    }
    $dart$core.String get s => "s";
    A$i_ i;
}
void $package$run() {
    A a = new A();
    $dart$core.Object i = a.i;
    A$I$B b = (new $ceylon$language.dart$Callable(() => (i as A$I).$new$A$I$B())).f() as A$I$B;
    if (!(a.s == "s")) {
        throw new $ceylon$language.AssertionError("Violated: a.s == \"s\"");
    }
    if (!((i as A$I).si == "s")) {
        throw new $ceylon$language.AssertionError("Violated: i.si == \"s\"");
    }
    if (!(b.sba == "s")) {
        throw new $ceylon$language.AssertionError("Violated: b.sba == \"s\"");
    }
    if (!(b.sbi == "s")) {
        throw new $ceylon$language.AssertionError("Violated: b.sbi == \"s\"");
    }
    $ceylon$language.print($ceylon$language.String.instance("done."));
}

void run() => $package$run();