import "dart:core" as $dart$core;
import "package:ceylon/interop/dart/dart.dart" as $ceylon$interop$dart;
import "package:ceylon/dart/runtime/model/model.dart" as $ceylon$dart$runtime$model;
import "package:ceylon/language/language.dart" as $ceylon$language;

$dart$core.int $package$two([$dart$core.Object f = $ceylon$language.dart$default]) {
  if ($dart$core.identical(f, $ceylon$language.dart$default)) {
    f = new $ceylon$language.dart$Callable(([$dart$core.Object $0, $dart$core.Object $1]) => $ceylon$language.plus(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Integer"), $0, $1));
  }
  return $ceylon$language.$dartInt((f as $ceylon$language.Callable).f($ceylon$language.$ceylonInteger(1), $ceylon$language.$ceylonInteger(1)) as $ceylon$language.Integer);
}

$dart$core.int two([$dart$core.Object f = $ceylon$language.dart$default]) => $package$two(f);

class Two implements $ceylon$language.dart$$Basic {
  Two([$dart$core.Object f = $ceylon$language.dart$default]) : this.$s((() {
    if ($dart$core.identical(f, $ceylon$language.dart$default)) {
      f = new $ceylon$language.dart$Callable(([$dart$core.Object $0, $dart$core.Object $1]) => $ceylon$language.plus(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Integer"), $0, $1));
    }
    return [f];
  })());
  Two.$s([$dart$core.List a]) : this.$w(a[0]);
  Two.$w([$ceylon$language.Callable f]) {
    this._f = f;
  }
  $ceylon$language.Callable _f;
  $dart$core.int get val => $ceylon$language.$dartInt(_f.f($ceylon$language.$ceylonInteger(1), $ceylon$language.$ceylonInteger(1)) as $ceylon$language.Integer);
}
void $package$run() {
  if (!($package$two() == 2)) {
    throw new $ceylon$language.AssertionError("Violated: two() == 2");
  }
  if (!((new Two()).val == 2)) {
    throw new $ceylon$language.AssertionError("Violated: Two().val == 2");
  }
}

void run() => $package$run();

$ceylon$language.dart$Callable _$runToplevel = new $ceylon$language.dart$Callable(($ceylon$language.String toplevel) {
  switch (toplevel.toString()) {
  case "run" :
    $package$run();
    return $ceylon$language.$true;
  }
  return $ceylon$language.$false;
});

const _$jsonModel = const{"\$mod-name":"default","\$mod-version":"unversioned","":const{"Two":const{"mt":"c","nm":"Two","super":const{"nm":"Basic","pk":"\$","md":"\$"}}}};

var _$module = null;

var _$moduleInitializing = false;

get $module {
  if ((_$module == null) && (!_$moduleInitializing)) {
    _$moduleInitializing = true;
    _$module = new $ceylon$dart$runtime$model.json$LazyJsonModule(new $ceylon$interop$dart.JsonObject(_$jsonModel), _$runToplevel);
    _$moduleInitializing = false;
    _$module.initializeImports((new $ceylon$interop$dart.CeylonIterable([$ceylon$language.$module])).sequence());
  }
  return _$module;
}

void main($dart$core.List arguments) {
  $ceylon$language.$run(arguments, $module);
}