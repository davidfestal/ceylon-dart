import "dart:core" as $dart$core;
import "package:ceylon/interop/dart/dart.dart" as $ceylon$interop$dart;
import "package:ceylon/dart/runtime/model/model.dart" as $ceylon$dart$runtime$model;
import "package:ceylon/language/language.dart" as $ceylon$language;

class I$J$C implements $ceylon$language.dart$$Basic {
    I$J $outer$default$I$J;
    I$J$C([I$J $outer$default$I$J, $dart$core.String _$s]) {
        this.$outer$default$I$J = $outer$default$I$J;
        this._$s = _$s;
    }
    $dart$core.String _$s;
}
abstract class I$J {
    I get $outer$default$I;
    static I$J$C $$new$I$J$C([final I$J $this, $dart$core.String _$s]) => new I$J$C($this, _$s);
    I$J$C $new$I$J$C([$dart$core.String _$s]);
}
abstract class I {
}
$ceylon$language.Callable $package$newC = new $ceylon$language.dart$Callable(([$dart$core.Object $r]) => new $ceylon$language.dart$Callable(([$dart$core.Object $0]) => ($r as I$J).$new$I$J$C($ceylon$language.$dartString($0 as $ceylon$language.String))));

$ceylon$language.Callable get newC => $package$newC;

const _$jsonModel = const{"\$mod-name":"default","\$mod-version":"unversioned","":const{"I":const{"mt":"i","nm":"I","sts":const[],"\$i":const{"J":const{"mt":"i","nm":"J","sts":const[],"\$c":const{"C":const{"mt":"c","nm":"C","super":const{"nm":"Basic","pk":"\$","md":"\$"},"sts":const[]}}}}}}};

var _$module = null;

get $module {
    if (_$module == null) {
        _$module = new $ceylon$dart$runtime$model.json$LazyJsonModule(new $ceylon$interop$dart.JsonObject(_$jsonModel));
        _$module.initializeImports((new $ceylon$interop$dart.CeylonIterable([$ceylon$language.$module])).sequence());
    }
    return _$module;
}