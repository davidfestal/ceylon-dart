import "dart:core" as $dart$core;
import "package:ceylon/interop/dart/dart.dart" as $ceylon$interop$dart;
import "package:ceylon/dart/runtime/model/model.dart" as $ceylon$dart$runtime$model;
import "package:ceylon/language/language.dart" as $ceylon$language;

class I$J$C implements $ceylon$language.dart$$Basic {
  I$J $outer$default$I$J;
  I$J$C([I$J $outer$default$I$J, $dart$core.String s]) {
    this.$outer$default$I$J = $outer$default$I$J;
    this._s = s;
  }
  $dart$core.String _s;
}
abstract class I$J {
  I get $outer$default$I;
  static I$J$C $$new$I$J$C([final I$J $this, $dart$core.String s]) => new I$J$C($this, s);
  I$J$C $new$I$J$C([$dart$core.String s]);
}
abstract class I {
}
$ceylon$language.Callable $package$newC = new $ceylon$language.dart$Callable(([$dart$core.Object $r]) => new $ceylon$language.dart$Callable(([$dart$core.Object $0]) => ($r as I$J).$new$I$J$C($ceylon$language.$dartString($0 as $ceylon$language.String))));

$ceylon$language.Callable get newC => $package$newC;

$ceylon$language.dart$Callable _$runToplevel = new $ceylon$language.dart$Callable(($ceylon$language.String toplevel) {
  return $ceylon$language.$false;
});

const _$jsonModel = const{"\$mod-name":"default","\$mod-version":"unversioned","":const{"I":const{"mt":"i","nm":"I","sts":const[],"\$i":const{"J":const{"mt":"i","nm":"J","sts":const[],"\$c":const{"C":const{"mt":"c","nm":"C","super":const{"nm":"Basic","pk":"\$","md":"\$"},"sts":const[]}}}}}}};

var _$module = null;

get $module {
  if (_$module == null) {
    _$module = new $ceylon$dart$runtime$model.json$LazyJsonModule(new $ceylon$interop$dart.JsonObject(_$jsonModel), _$runToplevel);
    _$module.initializeImports((new $ceylon$interop$dart.CeylonIterable([$ceylon$language.$module])).sequence());
  }
  return _$module;
}

void main($dart$core.List arguments) {
  $ceylon$language.$run(arguments, $module);
}