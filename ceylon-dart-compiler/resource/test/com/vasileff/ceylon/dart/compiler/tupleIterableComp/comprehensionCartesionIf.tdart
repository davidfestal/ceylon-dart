import "dart:core" as $dart$core;
import "package:ceylon/interop/dart/dart.dart" as $ceylon$interop$dart;
import "package:ceylon/dart/runtime/model/model.dart" as $ceylon$dart$runtime$model;
import "package:ceylon/language/language.dart" as $ceylon$language;

void $package$run() {
  $ceylon$language.Sequential maybeSeq = new $ceylon$language.Tuple.$withList(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Integer"), new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Integer"), new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Integer[2]"), [$ceylon$language.$ceylonInteger(1), $ceylon$language.$ceylonInteger(2), $ceylon$language.$ceylonInteger(3)]);
  $ceylon$language.Tuple x = new $ceylon$language.Tuple.$withList(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Integer"), new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Integer"), new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "[ceylon.language::Integer, ceylon.language::Integer, ceylon.language::Integer, ceylon.language::Integer*]"), [$ceylon$language.$ceylonInteger(-3), $ceylon$language.$ceylonInteger(-2), $ceylon$language.$ceylonInteger(-1), $ceylon$language.$ceylonInteger(0)], $ceylon$language.dart$functionIterable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Integer"), new $ceylon$language.dart$Callable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "<ceylon.language::Finished|ceylon.language::Integer>()"), new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "[]"), () {
    $dart$core.bool step$0$expired$0 = false;
    $dart$core.bool step$0$1() {
      if (step$0$expired$0) {
        return false;
      }
      step$0$expired$0 = true;
      return true;
    }

    $ceylon$language.Sequential seq$4;
    $dart$core.bool step$1$2() {
      while (step$0$1()) {
        $ceylon$language.Sequential seq;
        $ceylon$language.Sequential tmp$3 = maybeSeq;
        if (!(!(null == tmp$3))) {
          continue;
        }
        seq = tmp$3;
        seq$4 = seq;
        return true;
      }
      return false;
    }

    $ceylon$language.Iterator iterator_2$5;
    $dart$core.bool step$2$Init$8() {
      if (iterator_2$5 != null) {
        return true;
      }
      if (!step$1$2()) {
        return false;
      }
      $ceylon$language.Sequential seq = seq$4;
      iterator_2$5 = seq.iterator();
      return true;
    }

    $ceylon$language.Integer i$7;
    $dart$core.bool step$2$9() {
      while (step$2$Init$8()) {
        $ceylon$language.Sequential seq = seq$4;
        $dart$core.Object next$6;
        if ((next$6 = iterator_2$5.next()) is !$ceylon$language.Finished) {
          $ceylon$language.Integer i;
          {
            i = next$6 as $ceylon$language.Integer;
          }
          i$7 = i;
          return true;
        }
        iterator_2$5 = null;
      }
      return false;
    }

    $ceylon$language.Iterator iterator_3$10;
    $dart$core.bool step$3$Init$13() {
      if (iterator_3$10 != null) {
        return true;
      }
      if (!step$2$9()) {
        return false;
      }
      $ceylon$language.Sequential seq = seq$4;
      $ceylon$language.Integer i = i$7;
      iterator_3$10 = seq.iterator();
      return true;
    }

    $ceylon$language.Integer j$12;
    $dart$core.bool step$3$14() {
      while (step$3$Init$13()) {
        $ceylon$language.Sequential seq = seq$4;
        $ceylon$language.Integer i = i$7;
        $dart$core.Object next$11;
        if ((next$11 = iterator_3$10.next()) is !$ceylon$language.Finished) {
          $ceylon$language.Integer j;
          {
            j = next$11 as $ceylon$language.Integer;
          }
          j$12 = j;
          return true;
        }
        iterator_3$10 = null;
      }
      return false;
    }

    $dart$core.bool step$4$15() {
      while (step$3$14()) {
        $ceylon$language.Sequential seq = seq$4;
        $ceylon$language.Integer i = i$7;
        $ceylon$language.Integer j = j$12;
        if (($ceylon$language.$dartInt(i) > 1) && ($ceylon$language.$dartInt(j) > 2)) {
          return true;
        }
      }
      return false;
    }

    $dart$core.Object step$5$16() {
      if (!step$4$15()) {
        return $ceylon$language.finished;
      }
      $ceylon$language.Sequential seq = seq$4;
      $ceylon$language.Integer i = i$7;
      $ceylon$language.Integer j = j$12;
      return $ceylon$language.$ceylonInteger($ceylon$language.$dartInt(i) + $ceylon$language.$dartInt(j));
    }

    return new $ceylon$language.dart$Callable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Finished|ceylon.language::Integer"), new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "[]"), step$5$16);
  })).sequence());
  $ceylon$language.printAll(x);
}

void run() => $package$run();

$ceylon$language.dart$Callable _$runToplevel = new $ceylon$language.dart$Callable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.language::Boolean"), new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "[ceylon.language::String]"), ($ceylon$language.String toplevel) {
  switch (toplevel.toString()) {
  case "run" :
    $package$run();
    return $ceylon$language.$true;
  }
  return $ceylon$language.$false;
});

const _$jsonModel = const{"\$mod-name":"default","\$mod-version":"unversioned","":const{}};

var _$module = null;

var _$moduleInitializing = false;

get $module {
  if ((_$module == null) && (!_$moduleInitializing)) {
    _$moduleInitializing = true;
    _$module = new $ceylon$dart$runtime$model.json$LazyJsonModule(new $ceylon$interop$dart.JsonObject(_$jsonModel), _$runToplevel);
    _$moduleInitializing = false;
    _$module.initializeImports((new $ceylon$interop$dart.CeylonIterable(new $ceylon$dart$runtime$model.runtime$TypeDescriptor($module, "ceylon.dart.runtime.model::Module"), [$ceylon$language.$module])).sequence());
  }
  return _$module;
}

void main($dart$core.List arguments) {
  $ceylon$language.$run(arguments, $module);
}