import ceylon.ast.core {
    ValueDeclaration,
    ValueDefinition,
    FunctionDeclaration,
    TypeAliasDefinition,
    WideningTransformer,
    Node,
    FunctionDefinition,
    InterfaceDefinition,
    FunctionShortcutDefinition,
    ValueGetterDefinition,
    LazySpecifier,
    AnyValue,
    AnyFunction,
    ValueSetterDefinition,
    TypedDeclaration
}

import com.redhat.ceylon.model.typechecker.model {
    ClassOrInterfaceModel=ClassOrInterface,
    InterfaceModel=Interface,
    ValueModel=Value,
    SetterModel=Setter,
    TypedDeclarationModel=TypedDeclaration
}
import com.vasileff.ceylon.dart.ast {
    DartSimpleIdentifier,
    DartMethodDeclaration,
    DartClassMember,
    DartFormalParameterList,
    DartSimpleFormalParameter,
    dartFormalParameterListEmpty,
    DartTypeName
}
import com.vasileff.ceylon.dart.nodeinfo {
    AnyFunctionInfo,
    ValueDefinitionInfo,
    AnyValueInfo,
    ValueDeclarationInfo,
    typedDeclarationInfo,
    ValueSetterDefinitionInfo
}

shared
class ClassMemberTransformer(CompilationContext ctx)
        extends BaseGenerator(ctx)
        satisfies WideningTransformer<[DartClassMember*]> {

    shared actual
    [DartClassMember*] transformValueDeclaration(ValueDeclaration that) {
        // skip native declarations entirely, for now
        if (!isForDartBackend(that)) {
            return [];
        }

        if (ValueDeclarationInfo(that).declarationModel.variable) {
            return [generateMethodGetterOrSetterDeclaration(that),
                    generateSetterDeclaration(that)];
        }
        else {
            return [generateMethodGetterOrSetterDeclaration(that)];
        }
    }

    shared actual
    [DartClassMember*] transformValueDefinition(ValueDefinition that) {
        // skip native declarations entirely, for now
        if (!isForDartBackend(that)) {
            return [];
        }

        value info = ValueDefinitionInfo(that);

        "The container of a class or interface member is surely a ClassOrInterface"
        assert (is ClassOrInterfaceModel container = info.declarationModel.container);

        if (!container is InterfaceModel) {
            // TODO support classes; assuming interface code below
            throw CompilerBug(that, "classes not yet supported");
        }

        value specifier = that.definition;

        "Interfaces don't have fields"
        assert(is LazySpecifier specifier);

        // NOTE "getters" cannot be variable, so not worrying about setter
        //      declarations which are handled by ValueSetterDefinition
        return [generateMethodGetterOrSetterDeclaration(that),
                generateStaticInterfaceMethod(that)];
    }

    shared actual
    [DartClassMember*] transformValueSetterDefinition(ValueSetterDefinition that) {
        // skip native declarations entirely, for now
        if (!isForDartBackend(that)) {
            return [];
        }
        // TODO ValueSetterDefinition
        return [generateMethodGetterOrSetterDeclaration(that)];
    }

    shared actual
    [DartClassMember*] transformValueGetterDefinition(ValueGetterDefinition that) {
        // skip native declarations entirely, for now
        if (!isForDartBackend(that)) {
            return [];
        }
        return [generateMethodGetterOrSetterDeclaration(that),
                generateStaticInterfaceMethod(that)];
    }

    shared actual
    []|[DartMethodDeclaration] transformFunctionDeclaration(FunctionDeclaration that) {
        // skip native declarations entirely, for now
        if (!isForDartBackend(that)) {
            return [];
        }
        return [generateMethodGetterOrSetterDeclaration(that)];
    }

    shared actual
    [DartMethodDeclaration*] transformFunctionShortcutDefinition
            (FunctionShortcutDefinition that) {
        // skip native declarations entirely, for now
        if (!isForDartBackend(that)) {
            return [];
        }

        return [generateMethodGetterOrSetterDeclaration(that),
                generateStaticInterfaceMethod(that)];
    }

    shared actual
    [DartMethodDeclaration*] transformFunctionDefinition(FunctionDefinition that) {
        // skip native declarations entirely, for now
        if (!isForDartBackend(that)) {
            return [];
        }

        return [generateMethodGetterOrSetterDeclaration(that),
                generateStaticInterfaceMethod(that)];
    }

    "Generates a method or getter declaration (not to be confused with *definition*).
     Note: Setter declarations for `AnyValue`s are *not* generated by this method, and
     may be needed for `variable` values."
    DartMethodDeclaration generateMethodGetterOrSetterDeclaration
            (AnyFunction | AnyValue | ValueSetterDefinition that) {

        value info
            =   switch (that)
                case (is TypedDeclaration) typedDeclarationInfo(that)
                case (is ValueSetterDefinition) ValueSetterDefinitionInfo(that);

        value declarationModel
            =   switch (info)
                case (is AnyValueInfo) info.declarationModel
                case (is AnyFunctionInfo) info.declarationModel
                case (is ValueSetterDefinitionInfo) info.declarationModel;

        "The container of a class or interface member is surely a ClassOrInterface"
        assert (is ClassOrInterfaceModel container
            =   (declarationModel of TypedDeclarationModel).container);

        value [identifier, isFunction]
            =   dartTypes.dartIdentifierForFunctionOrValueDeclaration {
                    that;
                    declarationModel;
                };

        return
        DartMethodDeclaration {
            false;
            null;
            generateFunctionReturnType(info);
            !isFunction then (
                if (that is ValueSetterDefinition)
                then "set"
                else "get"
            );
            identifier;
            parameters =
                if (isFunction, is AnyFunction that) then
                    generateFormalParameterList {
                        that;
                        that.parameterLists.first;
                    }
                else if (is SetterModel declarationModel) then
                    DartFormalParameterList {
                        false; false;
                        [
                            DartSimpleFormalParameter {
                                false; false;
                                dartTypes.dartReturnTypeNameForDeclaration {
                                    that;
                                    declarationModel.getter;
                                };
                                DartSimpleIdentifier {
                                    "$newValue";
                                };
                            }
                        ];
                    }
                else if (isFunction) then
                    dartFormalParameterListEmpty
                else
                    null;
            body = null;
        };
    }

    DartMethodDeclaration generateSetterDeclaration
            (ValueDeclaration|ValueDefinition that) {

        value declarationModel = AnyValueInfo(that).declarationModel;

        value [identifier, isFunction]
            =   dartTypes.dartIdentifierForFunctionOrValueDeclaration {
                    that;
                    declarationModel;
                    true;
                };

        return
        DartMethodDeclaration {
            false;
            null;
            isFunction then
                DartTypeName {
                    DartSimpleIdentifier {
                        "void";
                    };
                };
            !isFunction then "set";
            identifier;
            DartFormalParameterList {
                false; false;
                [
                    DartSimpleFormalParameter {
                        false; false;
                        dartTypes.dartReturnTypeNameForDeclaration {
                            that;
                            declarationModel;
                        };
                        DartSimpleIdentifier {
                            "$newValue";
                        };
                    }
                ];
            };
            body = null;
        };
    }

    DartMethodDeclaration generateStaticInterfaceMethod(
            FunctionDefinition
            | FunctionShortcutDefinition
            | ValueDefinition
            | ValueGetterDefinition that) {

        value info
            =   typedDeclarationInfo(that);

        value declarationModel
            =   switch(info)
                case (is AnyFunctionInfo) info.declarationModel
                case (is AnyValueInfo) info.declarationModel;

        "The container of a class or interface member is surely a ClassOrInterface"
        assert (is ClassOrInterfaceModel container = info.declarationModel.container);

        if (!container is InterfaceModel) {
            // TODO support classes; assuming interface code below
            throw CompilerBug(that, "classes not yet supported");
        }

        // Member functions of interfaces need a $this parameter.
        DartSimpleFormalParameter? thisParameter;
        if (is InterfaceModel container) {
            thisParameter = DartSimpleFormalParameter {
                true; false;
                dartTypes.dartTypeName {
                    that;
                    container.type;
                    false; false;
                };
                DartSimpleIdentifier("$this");
            };
        }
        else {
            thisParameter = null;
        }

        // Generate a DartFunctionExpression, then scrap it for parts
        value functionExpression
            =   if (is AnyFunction that)
                then generateFunctionExpression(that)
                else generateForValueDefinitionGetter(that).functionExpression;

        value standardParameters
            =   functionExpression.parameters
                else dartFormalParameterListEmpty;

        // TODO defaulted parameters! (see also transformFunctionDefinition)

        // a static method definition for the actual implementation
        return
        DartMethodDeclaration {
            false;
            "static";
            generateFunctionReturnType(info);
            null;
            DartSimpleIdentifier {
                dartTypes.getStaticInterfaceMethodName {
                    declarationModel;
                };
            };
            DartFormalParameterList {
                true; false;
                [
                    thisParameter,
                    *standardParameters.parameters
                ].coalesced.sequence();
            };
            functionExpression.body;
        };
    }

    shared actual
    [] transformTypeAliasDefinition(TypeAliasDefinition that)
        =>  [];

    shared actual
    [] transformInterfaceDefinition(InterfaceDefinition that) {
        that.visit(topLevelVisitor);
        return [];
    }

    shared actual default
    [] transformNode(Node that) {
        throw CompilerBug(that,
            "Unhandled node: '``className(that)``'");
    }
}
